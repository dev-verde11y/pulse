// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PREMIUM
  SUPER_PREMIUM
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
  GRACE_PERIOD
}

enum PlanType {
  FREE
  FAN
  MEGA_FAN
  MEGA_FAN_ANNUAL
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
  LIFETIME
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  
  // Subscription related
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  currentPlan        PlanType          @default(FREE)
  subscriptionExpiry DateTime?
  maxScreens         Int               @default(1)
  offlineViewing     Boolean           @default(false)
  gameVaultAccess    Boolean           @default(false)
  adFree            Boolean           @default(false)
  
  // Billing
  lastPaymentDate   DateTime?
  nextBillingDate   DateTime?
  autoRenewal       Boolean           @default(true)
  
  // Grace period (5 days after expiry)
  gracePeriodEnd    DateTime?
  
  // Preferences
  language          String            @default("pt-BR")
  emailNotifications Boolean          @default(true)
  
  // Relations
  subscriptions     Subscription[]
  watchHistory      WatchHistory[]
  favorites         Favorite[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Plan {
  id               String      @id @default(uuid())
  name             String      @unique // "Fan", "Mega Fan", "Mega Fan Annual"
  type             PlanType    @unique
  billingCycle     BillingCycle
  price            Decimal     @db.Decimal(10, 2)
  currency         String      @default("BRL")
  
  // Features
  maxScreens       Int         @default(1)
  offlineViewing   Boolean     @default(false)
  gameVaultAccess  Boolean     @default(false)
  adFree          Boolean     @default(true)
  
  // Descriptions
  description      String
  features         String[]    // Array of feature descriptions
  
  // Status
  active           Boolean     @default(true)
  displayOrder     Int         @default(0)
  popular          Boolean     @default(false)
  
  // Relations
  subscriptions    Subscription[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String
  planId            String
  
  // Status
  status            SubscriptionStatus @default(PENDING)
  startDate         DateTime           @default(now())
  endDate           DateTime
  autoRenewal       Boolean            @default(true)
  
  // Payment info
  amount            Decimal            @db.Decimal(10, 2)
  currency          String             @default("BRL")
  paymentMethod     String?            // "credit_card", "pix", "boleto"
  transactionId     String?
  
  // Renewal tracking
  renewalCount      Int                @default(0)
  lastRenewalDate   DateTime?
  nextBillingDate   DateTime?
  
  // Cancellation
  cancelledAt       DateTime?
  cancellationReason String?
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              Plan               @relation(fields: [planId], references: [id])
  payments          Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Payment {
  id               String    @id @default(uuid())
  subscriptionId   String
  
  // Payment details
  amount           Decimal   @db.Decimal(10, 2)
  currency         String    @default("BRL")
  status           String    // "pending", "completed", "failed", "refunded"
  paymentMethod    String    // "credit_card", "pix", "boleto"
  
  // External references
  externalId       String?   // Payment provider ID
  receiptUrl       String?
  
  // Dates
  paidAt           DateTime?
  dueDate          DateTime?
  refundedAt       DateTime?
  
  // Relations
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model WatchHistory {
  id          String   @id @default(uuid())
  userId      String
  animeId     String
  episodeId   String?
  
  // Progress
  progress    Float    @default(0) // 0-100 percentage
  duration    Int?     // Total duration in seconds
  watchedAt   DateTime @default(now())
  completed   Boolean  @default(false)
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime       Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, animeId, episodeId])
  @@map("watch_history")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  animeId   String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime     Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, animeId])
  @@map("favorites")
}

enum AnimeStatus {
  FINISHED
  ONGOING
  UPCOMING
  CANCELLED
}

enum AnimeType {
  ANIME
  FILME
  SERIE
}

enum VideoQuality {
  HD
  FULL_HD
  ULTRA_HD_4K
}

model Anime {
  id            String       @id @default(uuid())
  title         String
  description   String       @db.Text
  thumbnail     String?
  banner        String?
  logo          String?
  
  // Basic info
  year          Int
  status        AnimeStatus  @default(ONGOING)
  type          AnimeType    @default(ANIME)
  rating        String       // "Livre", "10+", "12+", "14+", "16+", "18+"
  totalEpisodes Int?
  
  // Content flags
  isSubbed      Boolean      @default(true)
  isDubbed      Boolean      @default(false)
  
  // Metadata
  genres        String[]     // Array of genres
  tags          String[]     @default([])
  director      String?
  studio        String?
  
  // Cloudflare R2 integration
  r2BucketPath  String?      // Base path in R2 bucket
  
  // Relations
  seasons       Season[]
  favorites     Favorite[]
  watchHistory  WatchHistory[]
  
  // SEO
  slug          String       @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("animes")
}

model Season {
  id          String    @id @default(uuid())
  animeId     String
  
  // Season info
  seasonNumber Int
  title       String?   // Optional season title like "Final Season"
  description String?   @db.Text
  
  // Dates
  releaseDate DateTime?
  endDate     DateTime?
  
  // Cloudflare R2 integration
  r2BucketPath String?  // Season-specific path in R2 bucket
  
  // Relations
  anime       Anime     @relation(fields: [animeId], references: [id], onDelete: Cascade)
  episodes    Episode[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([animeId, seasonNumber])
  @@map("seasons")
}

model Episode {
  id            String    @id @default(uuid())
  seasonId      String
  
  // Episode info
  episodeNumber Int
  title         String
  description   String?   @db.Text
  thumbnail     String?
  
  // Duration in seconds
  duration      Int
  
  // Cloudflare R2 integration
  r2VideoPath   String?   // Path to video file in R2
  r2SubtitlePath String?  // Path to subtitle files in R2
  r2ThumbnailPath String? // Path to thumbnail in R2
  
  // Video quality available
  availableQualities VideoQuality[] @default([HD])
  
  // Air date
  airDate       DateTime?
  
  // Relations
  season        Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([seasonId, episodeNumber])
  @@map("episodes")
}
